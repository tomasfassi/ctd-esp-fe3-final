{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomas\\\\Desktop\\\\DH\\\\Front End III\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [theme, setTheme] = useState(initialState.theme);\n  const tema = useMemo(() => cambiarTema(theme), initialState.data);\n\n  const changeTheme = () => {\n    tema === 'dark' ? setTheme('light') : setTheme('dark');\n  };\n\n  useEffect(() => {\n    document.body.setAttribute('data-theme', tema);\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      theme,\n      changeTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"h38oUcBVVlh5zMGfeitZSCggiCo=\");\n\n_c = ContextProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(ContextGlobal);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","initialState","theme","data","ContextGlobal","undefined","ContextProvider","children","setTheme","useState","tema","useMemo","cambiarTema","changeTheme","useEffect","document","body","setAttribute","useGlobalContext","useContext"],"sources":["C:/Users/tomas/Desktop/DH/Front End III/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const initialState = {theme: \"\", data: []}\r\n\r\nexport const ContextGlobal = createContext(undefined);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n  const [theme, setTheme] = useState(initialState.theme)\r\n\r\n  const tema = useMemo(()=>cambiarTema(theme),initialState.data)\r\n\r\n  const changeTheme = () => {\r\n    tema === 'dark' ? setTheme('light') : setTheme('dark')\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.body.setAttribute('data-theme', tema);\r\n  }, [theme])\r\n\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{theme, changeTheme}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => useContext(ContextGlobal);"],"mappings":";;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAR;EAAYC,IAAI,EAAE;AAAlB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAACK,SAAD,CAAnC;AAEP,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EACA,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBC,QAAQ,CAACR,YAAY,CAACC,KAAd,CAAlC;EAEA,MAAMQ,IAAI,GAAGC,OAAO,CAAC,MAAIC,WAAW,CAACV,KAAD,CAAhB,EAAwBD,YAAY,CAACE,IAArC,CAApB;;EAEA,MAAMU,WAAW,GAAG,MAAM;IACxBH,IAAI,KAAK,MAAT,GAAkBF,QAAQ,CAAC,OAAD,CAA1B,GAAsCA,QAAQ,CAAC,MAAD,CAA9C;EACD,CAFD;;EAIAM,SAAS,CAAC,MAAM;IACdC,QAAQ,CAACC,IAAT,CAAcC,YAAd,CAA2B,YAA3B,EAAyCP,IAAzC;EACD,CAFQ,EAEN,CAACR,KAAD,CAFM,CAAT;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACA,KAAD;MAAQW;IAAR,CAA/B;IAAA,UACGN;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CApBM;;GAAMD,e;;KAAAA,e;AAsBb,OAAO,MAAMY,gBAAgB,GAAG;EAAA;;EAAA,OAAMC,UAAU,CAACf,aAAD,CAAhB;AAAA,CAAzB;;IAAMc,gB"},"metadata":{},"sourceType":"module"}